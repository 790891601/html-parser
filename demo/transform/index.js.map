{
  "version": 3,
  "sources": ["../../packages/core/utils/element.ts", "../../packages/core/htmlParser.ts", "../../packages/transform/transformDiff.ts", "../../packages/transform/transformText.ts"],
  "sourcesContent": ["import {TagState} from './index'\r\n\r\nexport const unary = [\r\n  \"br\",\r\n  \"hr\",\r\n  \"img\",\r\n  \"input\",\r\n  \"meta\",\r\n  \"link\",\r\n  \"area\",\r\n  \"base\",\r\n  \"col\",\r\n  \"command\",\r\n  \"embed\",\r\n  \"keygen\",\r\n  \"param\",\r\n  \"source\",\r\n  \"track\",\r\n  \"wbr\"\r\n];\r\nexport function isUnary(tagName): boolean {\r\n  return unary.includes(tagName);\r\n}\r\n  \r\n/*\u7ED3\u675F\u6807\u7B7E*/\r\nexport function closeElement(element) {\r\n  if(element.unary) {\r\n    element.tagStatus = TagState.tagEnd;\r\n  }\r\n}\r\n/**\r\n * \u5BF9\u6BD4\u5143\u7D20\u662F\u5426\u76F8\u540C\u7C7B\u578B\r\n * @param element \r\n * @param elementThen \r\n * @returns \r\n */\r\nexport function isEqualElementType(element, elementThen): boolean {\r\n  if(element.type === elementThen.type) {\r\n    return true;\r\n  }\r\n  return false;\r\n}", "import {TextModes, TagState, advanceBy, advanceSpaces, isUnary, closeElement, toggleMode, revertMode} from './utils/index'\r\nimport {_parserOptions, parserOptions, parserContext, HTMLNodeType, ElementNode, TextNode, RootNode, CommentNode, Node} from './types'\r\n\r\nexport function tokenize(template) {\r\n  /**\r\n   * \u8F93\u5165\uFF1A<div>123</div>\r\n   * \u8F93\u51FA: [{ type: tagOpen, tagName: 'div' }, { type: text, content: '123' }, { type: tagEnd, tagName: 'div' }]\r\n   */\r\n  const tokens = [];\r\n  \r\n  return tokens;\r\n}\r\n\r\nlet idx = BigInt(1);\r\nexport class HTMLParser {\r\n  private _options: _parserOptions;\r\n  constructor(options: parserOptions = {}) {\r\n    this._options = {\r\n      ...options,\r\n      id: idx\r\n    };\r\n  }\r\n  parser(template) {\r\n    const root: RootNode = {\r\n      id: this._options.id++,\r\n      type: HTMLNodeType.Root,\r\n      children: [],\r\n      pid: BigInt(0),\r\n    };\r\n    const context: parserContext = {\r\n        source: template,\r\n        mode: TextModes.DATA,\r\n        oldMode: TextModes.DATA,\r\n        type: HTMLNodeType.Root,\r\n        children: [],\r\n        pid: root.id,\r\n    }\r\n    root.children = this.parseChildren(context);\r\n    \r\n    return root\r\n  }\r\n  parseChildren(context, ancestors = []): Node[] {\r\n      let nodes: Node[] = [];\r\n      // \u4ECE\u4E0A\u4E0B\u6587\u5BF9\u8C61\u4E2D\u53D6\u5F97\u5F53\u524D\u72B6\u6001\uFF0C\u5305\u62EC\u6A21\u5F0F mode \u548C\u6A21\u677F\u5185\u5BB9\r\n    \r\n      while (this.isEnd(context, ancestors)) {\r\n        const {mode, source, pid} = context;\r\n        let node;// \u53EA\u6709 DATA \u6A21\u5F0F\u548C RCDATA \u6A21\u5F0F\u624D\u652F\u6301\u63D2\u503C\u8282\u70B9\u7684\u89E3\u6790\r\n        if (mode === TextModes.DATA || mode === TextModes.RCDATA) {\r\n          // \u53EA\u6709 DATA \u6A21\u5F0F\u624D\u652F\u6301\u6807\u7B7E\u8282\u70B9\u7684\u89E3\u6790\r\n          if (source.startsWith(\"<![CDATA[\")) {\r\n            // CDATA\r\n            toggleMode(context, TextModes.CDATA);\r\n            continue;\r\n          }else if(mode === TextModes.DATA && source[0] === \"<\") {\r\n            if(source[1] === '!') {\r\n              if (source.startsWith(\"<!--\")) {\r\n                //\u6CE8\u91CA\r\n                node = this.parseComment(context, ancestors);\r\n              }\r\n            }else if(/[a-z]/i.test(source[1])) {\r\n              //\u6807\u7B7E\r\n              node = this.parseElement(context, ancestors);\r\n            }else if(source[1] === '/') {\r\n              //\u7ED3\u675F\u6807\u7B7E\u72B6\u6001\r\n              return nodes;\r\n            }\r\n          }else if (mode === TextModes.RCDATA || mode === TextModes.DATA && source[1] === \"/\") {\r\n            //\u7ED3\u675F\u6807\u7B7E\uFF0C\u8FD9\u91CC\u9700\u8981\u629B\u51FA\u9519\u8BEF\uFF0C\u540E\u6587\u4F1A\u8BE6\u7EC6\u89E3\u91CA\u539F\u56E0\r\n            throw new Error(\"\u4E0D\u662FDATA\u6A21\u5F0F\");\r\n          }else if(source.startsWith(\"{{\")) {\r\n            //\u63D2\u503C\u89E3\u6784\r\n            node = this.parseInterpolation(context);\r\n          }\r\n          // node \u4E0D\u5B58\u5728\uFF0C\u8BF4\u660E\u5904\u4E8E\u5176\u4ED6\u6A21\u5F0F\uFF0C\u5373\u975E DATA \u6A21\u5F0F\u4E14\u975E RCDATA \u6A21\u5F0F\r\n          if(!node) {\r\n            node = this.parseText(context);\r\n          }\r\n          node.pid = pid\r\n          nodes.push(node);\r\n        }else if(mode === TextModes.CDATA) {\r\n          if (source.startsWith(\"<![CDATA[\")) {\r\n            // CDATA\r\n            node = this.parseCDATA(context, ancestors);\r\n            revertMode(context);\r\n          }\r\n          nodes.push(node);\r\n        }\r\n      }\r\n      return nodes;\r\n  }\r\n  isEnd(context, ancestors) {\r\n    //\u5143\u7D20\u6808,\u5F53\u524D\u5B50\u5143\u7D20\u6709\u5BF9\u5E94\u6808\r\n    // for(let i = 0; i < ancestors.length; i++) {\r\n    //   if(ancestors[i].tag) {\r\n    //     return true;\r\n    //   }\r\n    // }\r\n    if(context.source) {\r\n      return true;\r\n    }\r\n  }\r\n    \r\n  parseText(context): TextNode {\r\n    let {mode, source} = context;\r\n    //\u5339\u914D\u7EAF\u6587\u672C\r\n    const match = source.match(/[^<>]*/);\r\n    let content = '';\r\n    if(match[0]) {\r\n      advanceBy(context, match[0].length);\r\n      content = match[0];\r\n    }\r\n    return {\r\n      id: this._options.id++,\r\n      type: HTMLNodeType.Text,\r\n      content: content,\r\n      pid: context.pid\r\n    }\r\n  }\r\n  parseInterpolation(context) {\r\n    const {source} = context;\r\n    const match = source.match(/^\\{\\{\\s*(.*?)\\s*\\}\\}/);\r\n    advanceBy(context, match[0].length);\r\n\r\n    return {\r\n      id: this._options.id++,\r\n      type: HTMLNodeType.Interpolation,\r\n      content: [match[0], match[1]],\r\n      pid: context.pid\r\n    }\r\n  }\r\n  parseElement(context, ancestors): ElementNode {\r\n    let {source} = context;\r\n  \r\n    const match = source.match(/^<([a-z][a-zA-Z-]*)/);\r\n    if(!match) {\r\n      throw new Error(\"\u6807\u7B7E\u683C\u5F0F\u4E0D\u6B63\u786E\");\r\n    }\r\n    const tagName = match[1];\r\n    const isUnaryTag = isUnary(tagName);\r\n\r\n    context.source = source.slice(match[0].length);\r\n    const element = { //\u8FD9\u4E2A\u72B6\u6001\u6808\uFF0C\u5B50\u5143\u7D20\u9700\u8981\u5339\u914D\u5B83\u662F\u5426\u9700\u8981\u95ED\u5408,\u6216\u8005\u5B83\u53EF\u80FD\u662F\u81EA\u95ED\u5408\u7684\u6807\u7B7E\r\n      tagStatus: TagState.tagName, //\u5185\u5BB9\u72B6\u6001\r\n      tagName: tagName, //\u6807\u7B7E\u540D\u79F0\r\n      unary: isUnaryTag,\r\n    }  \r\n    //1.\u5339\u914D\u5143\u7D20\u5C5E\u6027\r\n    const attrs = this.parseAttribute(context, element);\r\n    const ElementNode: ElementNode = {\r\n      id: this._options.id++,\r\n      type: HTMLNodeType.Element,\r\n      tagName: tagName,\r\n      children: [],\r\n      attrs: attrs,\r\n      pid: context.pid,\r\n    }\r\n\r\n    if(isUnaryTag) {\r\n      closeElement(element);\r\n    }else {\r\n      ancestors.push(element);\r\n      //2.\u5339\u914D\u5143\u7D20\u5185\u5BB9, \u6709\u5B50\u5143\u7D20\u5C31\u5F00\u542F\u72B6\u6001\u673A\r\n      element.tagStatus = TagState.text;\r\n      //\u5339\u914D\u5C3E\u5DF4\u5185\u5BB9\r\n      const matchTagEnd = context.source.match(`(.*?)<\\\\/${tagName}>`);\r\n  \r\n      if(matchTagEnd) {\r\n        context.pid = ElementNode.id;\r\n        ElementNode.children = this.parseChildren(context, ancestors);\r\n      }else {\r\n        throw new Error(\"\u6807\u7B7E\u5FC5\u987B\u8981\u6709\u7ED3\u675F\");\r\n      }\r\n      const ancestor = ancestors.pop(); //\u9000\u51FA\u6808\r\n      if(ancestor) {\r\n        advanceBy(context, ancestor.tagName.length+2);\r\n        advanceSpaces(context);\r\n        advanceBy(context, 1);\r\n      }else {\r\n        throw new Error(\"\u4E0D\u5408\u6CD5\u7684\u6807\u7B7E\");\r\n      }\r\n      //3.\u5339\u914D</...>\r\n      //2.\u6D88\u8D39\u65F6\uFF0C\u68C0\u6D4B\u6A21\u677F\u662F\u5426\u5B58\u5728 />\uFF0C\u5982\u679C\u6709\u5219\u8868\u793A\u5176\u4E3A\u81EA\u95ED\u5408\u6807\u7B7E\uFF0C\u9700\u8981\u505A\u51FA\u6807\u6CE8\r\n      //3.\u5B8C\u6210\u6B63\u5219\u5339\u914D\u540E\uFF0C\u9700\u8981\u8C03\u7528 advanceBy \u51FD\u6570\u6D88\u8D39\u7531\u6B63\u5219\u5339\u914D\u7684\u5168\u90E8\u5185\u5BB9\r\n      //4.\u5982\u679C\u81EA\u95ED\u5408\uFF0C\u5219 advanceBy \u6D88\u8D39 />\r\n    }\r\n    return ElementNode;\r\n  }\r\n  \r\n  parseAttribute(context, element) {\r\n    //\u89E3\u6790\u5C5E\u6027\uFF0C\u6307\u4EE4v-if,v-model,\u4E8B\u4EF6@event, v-on:eventName, v:bind:name.sync\r\n    const attrReg = /(:?[a-zA-Z][a-zA-Z-]*)\\s*(?:(=)\\s*(?:([\"'])([^\"'<>]*)\\3|([^\\s\"'<>]*)))?/\r\n  \r\n    const attributes: string[][] = [];\r\n    advanceSpaces(context);\r\n    let attrMatch;\r\n    while(context.source[0] !== '<' && context.source[0] !== '>') {\r\n      //\u6D88\u9664\u7A7A\u683C\r\n      attrMatch = context.source.match(attrReg);\r\n  \r\n      advanceBy(context, attrMatch[0].length); //\u6D88\u9664\u5C5E\u6027\r\n  \r\n      // ['v-if=\"isShow\"', 'v-if', '=', 'isShow'],   \r\n      // ['class=\"header\"', 'class', '=', 'header']\r\n      attributes.push([attrMatch[0], attrMatch[1], attrMatch[2], attrMatch[4]]);\r\n  \r\n      //\u6D88\u9664\u7A7A\u683C\r\n      advanceSpaces(context);\r\n      if(context.source[0] === '/' && element.unary) {\r\n        //\u81EA\u95ED\u5408\u6807\u7B7E\r\n        advanceBy(context, 1);\r\n      }\r\n      advanceSpaces(context);\r\n    }\r\n    advanceBy(context, 1); //\u6D88\u9664>\r\n  \r\n    return attributes;\r\n  }\r\n  //\u6CE8\u91CA\r\n  parseComment(context, ancestors): CommentNode {\r\n    let {source} = context;\r\n    let value = ''; //\u6CE8\u91CA\u5185\u5BB9\r\n  \r\n    source = source.slice(4);\r\n    source = source.replace(/([\\s\\S]*?)(-->)/, function(match, $1, $2) {\r\n      value = $1;\r\n      return $2 ? $2 : '';\r\n    });\r\n    if(source.startsWith(\"-->\")) {\r\n      context.source = source.slice(3);\r\n    }else {\r\n      //\u6216\u8005\u624B\u52A8\u95ED\u5408\r\n      value = context.source;\r\n      context.source = '';\r\n    }\r\n    return {\r\n      id: this._options.id++,\r\n      type: HTMLNodeType.Comment,\r\n      content: value,\r\n      pid: context.pid\r\n    }\r\n  }\r\n  parseCDATA(context, ancestors) {\r\n    const cdataMatch = context.source.match(/^<!\\[CDATA\\[([\\s\\S]*?)\\]\\]/);\r\n    advanceBy(context, cdataMatch[0].length);\r\n    \r\n    return {\r\n      id: this._options.id++,\r\n      type: HTMLNodeType.CDATA,\r\n      content: cdataMatch[1],\r\n      pid: context.pid\r\n    }\r\n  }\r\n}\r\n\r\nexport function createInsNode(node) {\r\n  // \u521B\u5EFAins\u8282\u70B9\uFF0C\u5E76\u590D\u5236\u539F\u8282\u70B9\u7684\u5C5E\u6027\u548C\u5B50\u8282\u70B9\r\n  const insNode: ElementNode = {\r\n      id: idx++,\r\n      type: HTMLNodeType.Element,\r\n      tagName: 'ins',\r\n      attrs: [],\r\n      children: [node],\r\n      pid: node.pid,\r\n  };\r\n  node.pid = insNode.id;\r\n  return insNode;\r\n}\r\nexport function createDelNode(node) {\r\n  // \u521B\u5EFAdel\u8282\u70B9\uFF0C\u5E76\u590D\u5236\u539F\u8282\u70B9\u7684\u5C5E\u6027\u548C\u5B50\u8282\u70B9\r\n  const delNode: ElementNode = {\r\n      id: idx++,\r\n      type: HTMLNodeType.Element,\r\n      tagName: 'del',\r\n      attrs: [],\r\n      children: [node],\r\n      pid: node.pid,\r\n  };\r\n  node.pid = delNode.id;\r\n  return delNode;\r\n}", "import { context } from \"esbuild\";\r\nimport { ElementNode, HTMLNodeType } from \"../core/types\";\r\nimport { isEqualElementType } from \"../core/utils\";\r\nimport  {createInsNode, createDelNode} from '../core/htmlParser'\r\n\r\nenum DiffType {\r\n    added,\r\n    removed\r\n}\r\n/** all for ast */\r\nexport function transformDiff(ast, context) {\r\n    // \u68C0\u67E5\u8282\u70B9\u662F\u5426\u6709\u5DEE\u5F02\u5316\uFF0C\u8FDB\u884C\u76F8\u5E94\u5904\u7406\r\n    const diffAst = context.diffAst;\r\n    const oldStack = [diffAst];\r\n    const newStack = [ast];\r\n    const parentMap = {}; //\u7236\u8282\u70B9id => \u7236\u8282\u70B9\r\n    const peddingMap = {}; //\u5F85\u64CD\u4F5C\u8282\u70B9\r\n    \r\n    while(oldStack.length || newStack.length) {\r\n        let isPushChildren = true; //\u662F\u5426\u52A0\u5165\u5B50\u8282\u70B9,\u9ED8\u8BA4\u4E3Atrue\r\n        let oldNode = oldStack.pop();\r\n        let newNode = newStack.pop();\r\n\r\n        //\u5B58\u50A8\u7236\u8282\u70B9\u5F15\u7528 - \u51CF\u5C11\u8282\u70B9\u5185\u5B58\r\n        const oldParentNode = oldNode && parentMap[oldNode.pid];\r\n        const newParentNode = newNode && parentMap[newNode.pid];\r\n\r\n        if(oldNode) {\r\n            parentMap[oldNode.id] = oldNode;\r\n        }\r\n        if(newNode) {\r\n            parentMap[newNode.id] = newNode;\r\n        }\r\n\r\n        if(oldNode && newNode) {\r\n            //\u8282\u70B9\u76F8\u540C\uFF0C\u4EE3\u8868\u65E7\u8282\u70B9\u548C\u65B0\u8282\u70B9\u7C7B\u578B\u4E00\u81F4\r\n            if(isEqualElementType(oldNode, newNode)) {\r\n                if(oldNode.type === HTMLNodeType.Text) {\r\n                    if(oldNode.content !== newNode.content) {\r\n                        insert(addDiffType(oldNode, DiffType.removed), newParentNode, null);\r\n                        insert(addDiffType(newNode, DiffType.added), newParentNode, newNode);\r\n                    }\r\n                }else if(oldNode.type === HTMLNodeType.Element) {\r\n                    if(oldNode.tagName !== newNode.tagName) {\r\n                        //Node\u8282\u70B9\u7C7B\u578B\u4E0D\u76F8\u7B49\uFF0C\u6BD4\u5982\u5143\u7D20\u6807\u7B7E\u540D\u4E0D\u4E00\u81F4\r\n                        isPushChildren = false;\r\n                        insert(addDiffType(oldNode, DiffType.removed), newParentNode, null);\r\n                        insert(addDiffType(newNode, DiffType.added), newParentNode, newNode);\r\n                    }\r\n                } else {\r\n                 \r\n                }\r\n            }else {\r\n                //\u8282\u70B9\u4E0D\u540C\r\n                insert(addDiffType(oldNode, DiffType.removed), newParentNode, null);\r\n                insert(addDiffType(newNode, DiffType.added), newParentNode, newNode);\r\n            }\r\n        }else if(oldNode) {\r\n            insert(addDiffType(oldNode, DiffType.removed), oldParentNode, oldNode);\r\n        }else if(newNode) {\r\n            insert(addDiffType(newNode, DiffType.added), newParentNode, newNode);\r\n        }\r\n        \r\n        if(oldNode && (oldNode.type === HTMLNodeType.Element || oldNode.type === HTMLNodeType.Root) && isPushChildren) {\r\n            oldStack.push(...oldNode.children);\r\n        }\r\n        if(newNode && (newNode.type === HTMLNodeType.Element || newNode.type === HTMLNodeType.Root) && isPushChildren) {\r\n            newStack.push(...newNode.children);\r\n        }\r\n    }\r\n\r\n     // \u6267\u884C\u63D2\u5165\u64CD\u4F5C\r\n    // for (const parent in parentMap) {\r\n    //     if (parentMap.hasOwnProperty(parent)) {\r\n    //         const parentNode = parentMap[parent];\r\n    //         if (parentNode) {\r\n    //             while (parentNode.firstChild) {\r\n    //                 parentNode.removeChild(parentNode.firstChild);\r\n    //             }\r\n    //             parentNode.append(...parentMap[parent].children);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    return () => {\r\n\r\n    }\r\n}\r\n\r\nfunction addDiffType(node, diffType) {\r\n    node.diffType = diffType;\r\n    // \u5BF9\u5DEE\u5F02\u5316\u8282\u70B9\u8FDB\u884C\u5904\u7406\uFF0C\u4F8B\u5982\u6DFB\u52A0ins\u6216del\u6807\u7B7E\r\n    const diffNode = createDiffNode(node);\r\n    return diffNode;\r\n}\r\nfunction createDiffNode(node) {\r\n    // \u6839\u636E\u5DEE\u5F02\u7C7B\u578B\u521B\u5EFA\u76F8\u5E94\u7684\u5DEE\u5F02\u8282\u70B9\r\n    if (node.diffType === DiffType.added) {\r\n        // \u521B\u5EFAins\u8282\u70B9\r\n        return createInsNode(node);\r\n    } else if (node.diffType === DiffType.removed) {\r\n        // \u521B\u5EFAdel\u8282\u70B9\r\n        return createDelNode(node);\r\n    } else {\r\n        // \u4E0D\u9700\u8981\u5DEE\u5F02\u5316\u5904\u7406\u7684\u8282\u70B9\uFF0C\u4FDD\u6301\u539F\u6837\r\n        return node;\r\n    }\r\n}\r\n\r\n\r\nfunction insert(newNode, container, anchor) {\r\n    if(anchor) {\r\n        //\u5982\u679C\u6709\u8282\u70B9\u5DF2\u7ECF\u627E\u5230\r\n        const findNodeIndex = container.children.findIndex((node) => node === anchor);\r\n        container.children.splice(findNodeIndex, 1, newNode);\r\n    }else {\r\n        container.children.unshift(newNode);\r\n    }\r\n}", "\r\nexport function transformText(node, context) {\r\n    return function postformText() {\r\n        const { tag, props } = node;\r\n        \r\n        //\u8F6C\u6362\u6587\u672C\u8282\u70B9\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
