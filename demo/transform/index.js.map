{
  "version": 3,
  "sources": ["../../packages/core/utils/element.ts", "../../packages/transform/transformDiff.ts", "../../packages/transform/transformText.ts"],
  "sourcesContent": ["import {TagState} from './index'\r\n\r\nexport const unary = [\r\n  \"br\",\r\n  \"hr\",\r\n  \"img\",\r\n  \"input\",\r\n  \"meta\",\r\n  \"link\",\r\n  \"area\",\r\n  \"base\",\r\n  \"col\",\r\n  \"command\",\r\n  \"embed\",\r\n  \"keygen\",\r\n  \"param\",\r\n  \"source\",\r\n  \"track\",\r\n  \"wbr\"\r\n];\r\nexport function isUnary(tagName): boolean {\r\n  return unary.includes(tagName);\r\n}\r\n  \r\n/*\u7ED3\u675F\u6807\u7B7E*/\r\nexport function closeElement(element) {\r\n  if(element.unary) {\r\n    element.tagStatus = TagState.tagEnd;\r\n  }\r\n}\r\n/**\r\n * \u5BF9\u6BD4\u5143\u7D20\u662F\u5426\u76F8\u540C\u7C7B\u578B\r\n * @param element \r\n * @param elementThen \r\n * @returns \r\n */\r\nexport function isEqualElementType(element, elementThen): boolean {\r\n  if(element.type === elementThen.type) {\r\n    return true;\r\n  }\r\n  return false;\r\n}", "import { ElementNode, HTMLNodeType } from \"../core/types\";\r\nimport { isEqualElementType } from \"../core/utils\";\r\n\r\nenum DiffType {\r\n    added,\r\n    removed\r\n}\r\n/** all for ast */\r\nexport function transformDiff(ast, context) {\r\n    // \u68C0\u67E5\u8282\u70B9\u662F\u5426\u6709\u5DEE\u5F02\u5316\uFF0C\u8FDB\u884C\u76F8\u5E94\u5904\u7406\r\n    const diffAst = context.diffAst;\r\n    const oldStack = [...diffAst.children];\r\n    const newStack = [...ast.children];    \r\n    \r\n    while(oldStack.length || newStack.length) {\r\n        let isPushChildren = true; //\u662F\u5426\u52A0\u5165\u5B50\u8282\u70B9,\u9ED8\u8BA4\u4E3Atrue\r\n        let oldNode = oldStack.pop();\r\n        let newNode = newStack.pop();\r\n\r\n        //\u4FDD\u5B58\u539F\u672C\u7684\u7236\u8282\u70B9,addDiffType\u4F1A\u6539\u53D8\u5F53\u524D\u7236\u8282\u70B9,\u63D2\u5165ins\u6807\u7B7E\u5462\r\n        const oldParentNode = oldNode && oldNode.parentNode;\r\n        const newParentNode = newNode && newNode.parentNode;\r\n\r\n        if(oldNode && newNode) {\r\n            //\u8282\u70B9\u76F8\u540C\uFF0C\u4EE3\u8868\u65E7\u8282\u70B9\u548C\u65B0\u8282\u70B9\u7C7B\u578B\u4E00\u81F4\r\n            if(isEqualElementType(oldNode, newNode)) {\r\n                if(oldNode.type === HTMLNodeType.Text) {\r\n                    if(oldNode.content !== newNode.content) {\r\n                        insert(addDiffType(oldNode, DiffType.removed), newParentNode, null);\r\n                        insert(addDiffType(newNode, DiffType.added), newParentNode, newNode);\r\n                    }\r\n                }else if(oldNode.type === HTMLNodeType.Element) {\r\n                    if(oldNode.tagName !== newNode.tagName) {\r\n                        //Node\u8282\u70B9\u7C7B\u578B\u4E0D\u76F8\u7B49\uFF0C\u6BD4\u5982\u5143\u7D20\u6807\u7B7E\u540D\u4E0D\u4E00\u81F4\r\n                        isPushChildren = false;\r\n                        insert(addDiffType(oldNode, DiffType.removed), newParentNode, null);\r\n                        insert(addDiffType(newNode, DiffType.added), newParentNode, newNode);\r\n                    }\r\n                } else {\r\n                 \r\n                }\r\n            }else {\r\n                //\u8282\u70B9\u4E0D\u540C\r\n                insert(addDiffType(oldNode, DiffType.removed), newParentNode, null);\r\n                insert(addDiffType(newNode, DiffType.added), newParentNode, newNode);\r\n            }\r\n        }else if(oldNode) {\r\n            insert(addDiffType(oldNode, DiffType.removed), oldParentNode, oldNode);\r\n        }else if(newNode) {\r\n            insert(addDiffType(newNode, DiffType.added), newParentNode, newNode);\r\n        }\r\n\r\n        if(oldNode && oldNode.type === HTMLNodeType.Element && isPushChildren) {\r\n            oldStack.push(...oldNode.children);\r\n        }\r\n        if(newNode && newNode.type === HTMLNodeType.Element && isPushChildren) {\r\n            newStack.push(...newNode.children);\r\n        }\r\n    }\r\n\r\n    return () => {\r\n\r\n    }\r\n}\r\n\r\nfunction addDiffType(node, diffType) {\r\n    node.diffType = diffType;\r\n    // \u5BF9\u5DEE\u5F02\u5316\u8282\u70B9\u8FDB\u884C\u5904\u7406\uFF0C\u4F8B\u5982\u6DFB\u52A0ins\u6216del\u6807\u7B7E\r\n    const diffNode = createDiffNode(node);\r\n    return diffNode;\r\n}\r\nfunction createDiffNode(node) {\r\n    // \u6839\u636E\u5DEE\u5F02\u7C7B\u578B\u521B\u5EFA\u76F8\u5E94\u7684\u5DEE\u5F02\u8282\u70B9\r\n    if (node.diffType === DiffType.added) {\r\n        // \u521B\u5EFAins\u8282\u70B9\r\n        return createInsNode(node);\r\n    } else if (node.diffType === DiffType.removed) {\r\n        // \u521B\u5EFAdel\u8282\u70B9\r\n        return createDelNode(node);\r\n    } else {\r\n        // \u4E0D\u9700\u8981\u5DEE\u5F02\u5316\u5904\u7406\u7684\u8282\u70B9\uFF0C\u4FDD\u6301\u539F\u6837\r\n        return node;\r\n    }\r\n}\r\nfunction createInsNode(node) {\r\n    // \u521B\u5EFAins\u8282\u70B9\uFF0C\u5E76\u590D\u5236\u539F\u8282\u70B9\u7684\u5C5E\u6027\u548C\u5B50\u8282\u70B9\r\n    const insNode: ElementNode = {\r\n        type: HTMLNodeType.Element,\r\n        tagName: 'ins',\r\n        attrs: [],\r\n        children: [node],\r\n        parentNode: node.parentNode,\r\n    };\r\n    node.parentNode = insNode;\r\n    return insNode;\r\n}\r\nfunction createDelNode(node) {\r\n    // \u521B\u5EFAdel\u8282\u70B9\uFF0C\u5E76\u590D\u5236\u539F\u8282\u70B9\u7684\u5C5E\u6027\u548C\u5B50\u8282\u70B9\r\n    const delNode: ElementNode = {\r\n        type: HTMLNodeType.Element,\r\n        tagName: 'del',\r\n        attrs: [],\r\n        children: [node],\r\n        parentNode: node.parentNode,\r\n    };\r\n    node.parentNode = delNode;\r\n    return delNode;\r\n}\r\n\r\nfunction insert(newNode, container, anchor) {\r\n    if(anchor) {\r\n        //\u5982\u679C\u6709\u8282\u70B9\u5DF2\u7ECF\u627E\u5230\r\n        const findNodeIndex = container.children.findIndex((node) => node === anchor);\r\n        container.children.splice(findNodeIndex, 1, newNode);\r\n    }else {\r\n        container.children.unshift(newNode);\r\n    }\r\n}", "\r\nexport function transformText(node, context) {\r\n    return function postformText() {\r\n        const { tag, props } = node;\r\n        \r\n        //\u8F6C\u6362\u6587\u672C\u8282\u70B9\r\n    }\r\n}"],
  "mappings": ";AAoCO,SAAS,mBAAmB,SAAS,aAAsB;AAChE,MAAG,QAAQ,SAAS,YAAY,MAAM;AACpC,WAAO;AAAA,EACT;AACA,SAAO;AACT;;;ACjCO,SAAS,cAAc,KAAK,SAAS;AAExC,QAAM,UAAU,QAAQ;AACxB,QAAM,WAAW,CAAC,GAAG,QAAQ,QAAQ;AACrC,QAAM,WAAW,CAAC,GAAG,IAAI,QAAQ;AAEjC,SAAM,SAAS,UAAU,SAAS,QAAQ;AACtC,QAAI,iBAAiB;AACrB,QAAI,UAAU,SAAS,IAAI;AAC3B,QAAI,UAAU,SAAS,IAAI;AAG3B,UAAM,gBAAgB,WAAW,QAAQ;AACzC,UAAM,gBAAgB,WAAW,QAAQ;AAEzC,QAAG,WAAW,SAAS;AAEnB,UAAG,mBAAmB,SAAS,OAAO,GAAG;AACrC,YAAG,QAAQ,4BAA4B;AACnC,cAAG,QAAQ,YAAY,QAAQ,SAAS;AACpC,mBAAO,YAAY,SAAS,eAAgB,GAAG,eAAe,IAAI;AAClE,mBAAO,YAAY,SAAS,aAAc,GAAG,eAAe,OAAO;AAAA,UACvE;AAAA,QACJ,WAAS,QAAQ,kCAA+B;AAC5C,cAAG,QAAQ,YAAY,QAAQ,SAAS;AAEpC,6BAAiB;AACjB,mBAAO,YAAY,SAAS,eAAgB,GAAG,eAAe,IAAI;AAClE,mBAAO,YAAY,SAAS,aAAc,GAAG,eAAe,OAAO;AAAA,UACvE;AAAA,QACJ,OAAO;AAAA,QAEP;AAAA,MACJ,OAAM;AAEF,eAAO,YAAY,SAAS,eAAgB,GAAG,eAAe,IAAI;AAClE,eAAO,YAAY,SAAS,aAAc,GAAG,eAAe,OAAO;AAAA,MACvE;AAAA,IACJ,WAAS,SAAS;AACd,aAAO,YAAY,SAAS,eAAgB,GAAG,eAAe,OAAO;AAAA,IACzE,WAAS,SAAS;AACd,aAAO,YAAY,SAAS,aAAc,GAAG,eAAe,OAAO;AAAA,IACvE;AAEA,QAAG,WAAW,QAAQ,oCAAiC,gBAAgB;AACnE,eAAS,KAAK,GAAG,QAAQ,QAAQ;AAAA,IACrC;AACA,QAAG,WAAW,QAAQ,oCAAiC,gBAAgB;AACnE,eAAS,KAAK,GAAG,QAAQ,QAAQ;AAAA,IACrC;AAAA,EACJ;AAEA,SAAO,MAAM;AAAA,EAEb;AACJ;AAEA,SAAS,YAAY,MAAM,UAAU;AACjC,OAAK,WAAW;AAEhB,QAAM,WAAW,eAAe,IAAI;AACpC,SAAO;AACX;AACA,SAAS,eAAe,MAAM;AAE1B,MAAI,KAAK,aAAa,eAAgB;AAElC,WAAO,cAAc,IAAI;AAAA,EAC7B,WAAW,KAAK,aAAa,iBAAkB;AAE3C,WAAO,cAAc,IAAI;AAAA,EAC7B,OAAO;AAEH,WAAO;AAAA,EACX;AACJ;AACA,SAAS,cAAc,MAAM;AAEzB,QAAM,UAAuB;AAAA,IACzB;AAAA,IACA,SAAS;AAAA,IACT,OAAO,CAAC;AAAA,IACR,UAAU,CAAC,IAAI;AAAA,IACf,YAAY,KAAK;AAAA,EACrB;AACA,OAAK,aAAa;AAClB,SAAO;AACX;AACA,SAAS,cAAc,MAAM;AAEzB,QAAM,UAAuB;AAAA,IACzB;AAAA,IACA,SAAS;AAAA,IACT,OAAO,CAAC;AAAA,IACR,UAAU,CAAC,IAAI;AAAA,IACf,YAAY,KAAK;AAAA,EACrB;AACA,OAAK,aAAa;AAClB,SAAO;AACX;AAEA,SAAS,OAAO,SAAS,WAAW,QAAQ;AACxC,MAAG,QAAQ;AAEP,UAAM,gBAAgB,UAAU,SAAS,UAAU,CAAC,SAAS,SAAS,MAAM;AAC5E,cAAU,SAAS,OAAO,eAAe,GAAG,OAAO;AAAA,EACvD,OAAM;AACF,cAAU,SAAS,QAAQ,OAAO;AAAA,EACtC;AACJ;;;ACpHO,SAAS,cAAc,MAAM,SAAS;AACzC,SAAO,SAAS,eAAe;AAC3B,UAAM,EAAE,KAAK,MAAM,IAAI;AAAA,EAG3B;AACJ;",
  "names": []
}
