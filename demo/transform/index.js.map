{
  "version": 3,
  "sources": ["../../packages/core/utils/constants.ts", "../../packages/core/utils/element.ts", "../../packages/core/tokenize.ts", "../../packages/transform/transformDiff.ts", "../../packages/transform/transformText.ts"],
  "sourcesContent": ["export const LEGENDS = {\r\n    'ADDED': 'added',\r\n    'REMOVED': 'removed',\r\n}\r\nexport const CONFIG = {\r\n    idx: BigInt(1), //\u53EF\u53D8\u914D\u7F6E\u53D8\u91CF\r\n}\r\n//\u91CD\u7F6Eidx\r\nexport const resetConfigIdx = () => {\r\n    CONFIG.idx = BigInt(1);\r\n}\r\n\r\n//\u5207\u6362\u6587\u672C\u6A21\u5F0F\r\nexport const toggleMode = (context, mode) => {\r\n    context.oldMode = context.mode;\r\n    context.mode = mode;\r\n}\r\n//\u6062\u590D\u6A21\u5F0F\r\nexport const revertMode = (context) => {\r\n    context.mode = context.oldMode;\r\n}\r\n", "import {TagState} from '../types'\r\n\r\nexport const unary = [\r\n  \"br\",\r\n  \"hr\",\r\n  \"img\",\r\n  \"input\",\r\n  \"meta\",\r\n  \"link\",\r\n  \"area\",\r\n  \"base\",\r\n  \"col\",\r\n  \"command\",\r\n  \"embed\",\r\n  \"keygen\",\r\n  \"param\",\r\n  \"source\",\r\n  \"track\",\r\n  \"wbr\"\r\n];\r\nexport function isUnary(tagName): boolean {\r\n  return unary.includes(tagName);\r\n}\r\n  \r\n/*\u7ED3\u675F\u6807\u7B7E*/\r\nexport function closeElement(element) {\r\n  if(element.unary) {\r\n    element.tagStatus = TagState.tagEnd;\r\n  }\r\n}\r\n/**\r\n * \u5BF9\u6BD4\u5143\u7D20\u662F\u5426\u76F8\u540C\u7C7B\u578B\r\n * @param element \r\n * @param elementThen \r\n * @returns \r\n */\r\nexport function isEqualElementType(element, elementThen): boolean {\r\n  if(element.type === elementThen.type) {\r\n    return true;\r\n  }\r\n  return false;\r\n}", "import {advanceBy, advanceSpaces, isUnary, toggleMode, revertMode, CONFIG, resetConfigIdx } from './utils/index'\r\nimport {_parserOptions, parserContext, HTMLNodeType, ElementNode, TextNode, CommentNode, Node, TagState, TextModes} from './types'\r\n\r\nconst elementRE = /^\\s*(?:<\\/\\s*([^>\\s\\/]*)\\s*>|<([^>\\s\\/]*)\\s*([^<>]*?)(\\/?)>)/;\r\n// const valuedAttributeRE = /([?]|(?!\\d|-{2}|-\\d)[a-zA-Z0-9\\u00A0-\\uFFFF-_:!%-.~<]+)=?(?:[\"]([^\"]*)[\"]|[']([^']*)[']|[{]([^}]*)[}])?/gms;\r\n\r\nexport function tokenize(context: parserContext) {\r\n  let tokens: any[] = [];\r\n\r\n  while (context.source) {\r\n    const {mode, source} = context;\r\n    let token\r\n    if (mode === TextModes.DATA || mode === TextModes.RCDATA) {\r\n      // \u53EA\u6709 DATA \u6A21\u5F0F\u624D\u652F\u6301\u6807\u7B7E\u8282\u70B9\u7684\u89E3\u6790\r\n      if (source.startsWith(\"<![CDATA[\")) {\r\n        // CDATA\r\n        toggleMode(context, TextModes.CDATA);\r\n        continue;\r\n      }else if(mode === TextModes.DATA && source[0] === \"<\") {\r\n        if(source[1] === '!') {\r\n          if (source.startsWith(\"<!--\")) {\r\n            //\u6CE8\u91CA\r\n            token = parseComment(context);\r\n          }\r\n        }else if(/[a-zA-Z]/i.test(source[1])) {\r\n          // \u89E3\u6790\u5F00\u59CB\u6807\u7B7E\r\n          token = parseStartTag(context);\r\n        }else if(source[1] === '/') {\r\n          //\u7ED3\u675F\u6807\u7B7E\u72B6\u6001\r\n          token = parseEndTag(context);\r\n        }\r\n      }else if (mode === TextModes.RCDATA || mode === TextModes.DATA && source[1] === \"/\") {\r\n        //\u7ED3\u675F\u6807\u7B7E\uFF0C\u8FD9\u91CC\u9700\u8981\u629B\u51FA\u9519\u8BEF\uFF0C\u540E\u6587\u4F1A\u8BE6\u7EC6\u89E3\u91CA\u539F\u56E0\r\n        throw new Error(\"\u4E0D\u662FDATA\u6A21\u5F0F\");\r\n      }else if(source.startsWith(\"{{\")) {\r\n        //\u63D2\u503C\u89E3\u6784\r\n        token = parseInterpolation(context);\r\n      }\r\n      // node \u4E0D\u5B58\u5728\uFF0C\u8BF4\u660E\u5904\u4E8E\u5176\u4ED6\u6A21\u5F0F\uFF0C\u5373\u975E DATA \u6A21\u5F0F\u4E14\u975E RCDATA \u6A21\u5F0F\r\n      if(!token) {\r\n        token = parseText(context);\r\n      }\r\n      tokens.push(token);\r\n    }else if(mode === TextModes.CDATA) {\r\n      if (source.startsWith(\"<![CDATA[\")) {\r\n        // CDATA\r\n        token = parseCDATA(context);\r\n        revertMode(context);\r\n      }\r\n      tokens.push(token);\r\n    }\r\n  }\r\n\r\n  return tokens;\r\n}\r\n\r\n\r\nfunction parseStartTag(context: parserContext) {\r\n    const tag: any = {\r\n      id: CONFIG.idx++,\r\n      type: TagState.tagOpen,\r\n      tagName: '',\r\n      attrs: [],\r\n      unary: false,\r\n    };\r\n\r\n    const elMatch = context.source.match(elementRE);\r\n\r\n    if(elMatch) {\r\n        const tagName = elMatch[2];\r\n        const attributes = elMatch[3];\r\n        const selfClose = elMatch[4];\r\n\r\n        tag.tagName = tagName;\r\n        tag.attrs = parseAttributes(attributes);\r\n        if(selfClose) {\r\n            if(!isUnary(tagName)) {\r\n                throw new Error(\"\u5355\u6807\u7B7E\u4E0D\u5408\u6CD5\")\r\n            }\r\n            tag.unary = true;\r\n            tag.type = TagState.tagName\r\n        }\r\n        advanceBy(context, elMatch[0].length);\r\n    }\r\n    return tag;\r\n  }\r\n  \r\n  function parseEndTag(context) {\r\n    const tagEnd: any = {\r\n        type: TagState.tagEnd,\r\n        tagName: '',\r\n    };\r\n    const elMatch = context.source.match(elementRE);\r\n\r\n    if(elMatch) {\r\n        const tagName = elMatch[1];\r\n        tagEnd.tagName = tagName;\r\n        advanceBy(context, elMatch[0].length);\r\n    }\r\n    return tagEnd\r\n  }\r\n  \r\nexport function parseAttributes(input) {\r\n    const attributes: any[] = [];\r\n  \r\n    // \u901A\u8FC7\u6B63\u5219\u8868\u8FBE\u5F0F\u63D0\u53D6\u5C5E\u6027\u540D\u548C\u5C5E\u6027\u503C\r\n    const regex = /(\\w+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^>\\s]*))/g;\r\n    let match;\r\n    \r\n    while ((match = regex.exec(input)) !== null) {\r\n      const attribute = {\r\n        name: match[1],\r\n        value: match[2] || match[3] || match[4]\r\n      };\r\n  \r\n      attributes.push(attribute);\r\n    }\r\n  \r\n    return attributes;\r\n}\r\n  \r\nexport function parseText(context) {\r\n    let {source} = context;\r\n    //\u5339\u914D\u7EAF\u6587\u672C\r\n    const match = source.match(/[^<>]*/);\r\n    let content = '';\r\n    if(match[0]) {\r\n      advanceBy(context, match[0].length);\r\n      content = match[0];\r\n    }\r\n\r\n    return {\r\n        id: CONFIG.idx++,\r\n        type: HTMLNodeType.Text,\r\n        content: content,\r\n    };\r\n}\r\n\r\n//\u6CE8\u91CA\r\nexport function parseComment(context) {\r\n    let {source} = context;\r\n    let value = ''; //\u6CE8\u91CA\u5185\u5BB9\r\n  \r\n    source = source.slice(4);\r\n    source = source.replace(/([\\s\\S]*?)(-->)/, function(match, $1, $2) {\r\n      value = $1;\r\n      return $2 ? $2 : '';\r\n    });\r\n    if(source.startsWith(\"-->\")) {\r\n      context.source = source.slice(3);\r\n    }else {\r\n      //\u6216\u8005\u624B\u52A8\u95ED\u5408\r\n      value = context.source;\r\n      context.source = '';\r\n    }\r\n    return {\r\n      id: CONFIG.idx++,\r\n      type: HTMLNodeType.Comment,\r\n      content: value,\r\n    }\r\n}\r\nexport function parseCDATA(context) {\r\n    const cdataMatch = context.source.match(/^<!\\[CDATA\\[([\\s\\S]*?)\\]\\]/);\r\n    advanceBy(context, cdataMatch[0].length);\r\n    \r\n    return {\r\n      id: CONFIG.idx++,\r\n      type: HTMLNodeType.CDATA,\r\n      content: cdataMatch[1]\r\n    }\r\n}\r\nexport function parseInterpolation(context) {\r\n    const {source} = context;\r\n    const match = source.match(/^\\{\\{\\s*(.*?)\\s*\\}\\}/);\r\n    advanceBy(context, match[0].length);\r\n\r\n    return {\r\n      id: CONFIG.idx++,\r\n      type: HTMLNodeType.Interpolation,\r\n      content: [match[0], match[1]],\r\n    }\r\n}\r\n\r\nexport function createInsNode(node, options) {\r\n    // \u521B\u5EFAins\u8282\u70B9\uFF0C\u5E76\u590D\u5236\u539F\u8282\u70B9\u7684\u5C5E\u6027\u548C\u5B50\u8282\u70B9\r\n    const insNode: ElementNode = {\r\n        id: CONFIG.idx++,\r\n        type: HTMLNodeType.Element,\r\n        tagName: 'ins',\r\n        attrs: [...options.newAttrs],\r\n        children: [node],\r\n        pid: node.pid,\r\n    };\r\n    node.pid = insNode.id;\r\n    return insNode;\r\n  }\r\n  export function createDelNode(node, options) {\r\n    // \u521B\u5EFAdel\u8282\u70B9\uFF0C\u5E76\u590D\u5236\u539F\u8282\u70B9\u7684\u5C5E\u6027\u548C\u5B50\u8282\u70B9\r\n    const delNode: ElementNode = {\r\n        id: CONFIG.idx++,\r\n        type: HTMLNodeType.Element,\r\n        tagName: 'del',\r\n        attrs: [...options.oldAttrs],\r\n        children: [node],\r\n        pid: node.pid,\r\n    };\r\n    node.pid = delNode.id;\r\n    return delNode;\r\n  }", "import { context } from \"esbuild\";\r\nimport { ElementNode, HTMLNodeType } from \"../core/types\";\r\nimport { isEqualElementType } from \"../core/utils\";\r\nimport  {createInsNode, createDelNode} from '../core/tokenize'\r\n\r\nenum DiffType {\r\n    added,\r\n    removed\r\n}\r\n\r\nlet parentMap = {}; //\u7236\u8282\u70B9id => \u7236\u8282\u70B9\r\n/** all for ast */\r\nexport function transformDiffPlugin(options) {\r\n    parentMap = {};\r\n    const _options = Object.assign({\r\n        oldAttrs: [], //\u5916\u90E8\u5C5E\u6027\r\n        newAttrs: [],\r\n    }, options);\r\n\r\n    return function transformDiff(ast, context) {\r\n        // \u68C0\u67E5\u8282\u70B9\u662F\u5426\u6709\u5DEE\u5F02\u5316\uFF0C\u8FDB\u884C\u76F8\u5E94\u5904\u7406\r\n        const diffAst = context.diffAst;\r\n        const oldStack = [diffAst];\r\n        const newStack = [ast];\r\n\r\n        while(oldStack.length || newStack.length) { //\u81EA\u9876\u5411\u4E0B\r\n            let oldNode = oldStack.shift();\r\n            let newNode = newStack.shift();\r\n\r\n            if(newNode) {\r\n                parentMap[newNode.id] = newNode;\r\n            }\r\n            const newParentNode = newNode && parentMap[newNode.pid];\r\n            const oldParentNode = oldNode && parentMap[oldNode.pid];\r\n            const oldToNewNode = oldNode && parentMap[oldNode.id];\r\n\r\n            if(oldNode && newNode) {\r\n                //\u8282\u70B9\u76F8\u540C\uFF0C\u4EE3\u8868\u65E7\u8282\u70B9\u548C\u65B0\u8282\u70B9\u7C7B\u578B\u4E00\u81F4\r\n                if(isEqualElementType(oldNode, newNode)) {\r\n                    if(oldNode.type === HTMLNodeType.Text) {\r\n                        if(oldNode.content !== newNode.content) {\r\n                            //\u5E94\u8BE5\u53BB\u627E\u5230\u65E7\u8282\u70B9\u7684\u4F4D\u7F6E,\u7136\u540E\u65B0\u8282\u70B9\u5C31\u53EF\u4EE5\u653E\u5230\u539F\u6765\u7684\u4F4D\u7F6E\r\n                            insert(addDiffType(oldNode, DiffType.removed, _options), oldParentNode, oldToNewNode);\r\n                            insert(addDiffType(newNode, DiffType.added, _options), newParentNode, newNode);\r\n                        }\r\n                    }else if(oldNode.type === HTMLNodeType.Element) {\r\n                        if(oldNode.tagName !== newNode.tagName) {\r\n                            //Node\u8282\u70B9\u7C7B\u578B\u4E0D\u76F8\u7B49\uFF0C\u6BD4\u5982\u5143\u7D20\u6807\u7B7E\u540D\u4E0D\u4E00\u81F4\r\n                            insert(addDiffType(oldNode, DiffType.removed, _options), oldParentNode, oldToNewNode);\r\n                            insert(addDiffType(newNode, DiffType.added, _options), newParentNode, newNode);\r\n                        }else {\r\n                            diffAttributes(oldNode, newNode)\r\n                        }\r\n                    } else {\r\n                        //\u8282\u70B9\u76F8\u540C,\u4E0D\u4FEE\u6539\r\n                    }\r\n                }else {\r\n                    //\u8282\u70B9\u4E0D\u540C\r\n                    insert(addDiffType(oldNode, DiffType.removed, _options), oldParentNode, oldToNewNode);\r\n                    insert(addDiffType(newNode, DiffType.added, _options), newParentNode, newNode);\r\n                }\r\n                \r\n            }else if(oldNode) {\r\n                //\u53EA\u6709\u65E7\u8282\u70B9\r\n                insert(addDiffType(oldNode, DiffType.removed, _options), oldParentNode, oldToNewNode);\r\n            }else if(newNode) {\r\n                insert(addDiffType(newNode, DiffType.added, _options), newParentNode, newNode);\r\n            }\r\n\r\n            if(oldNode && ((oldNode.type === HTMLNodeType.Element && !oldNode.unary) || oldNode.type === HTMLNodeType.Root)) {\r\n                oldStack.push(...oldNode.children);\r\n            }\r\n            if(newNode && ((newNode.type === HTMLNodeType.Element && !newNode.unary) || newNode.type === HTMLNodeType.Root) ) {\r\n                newStack.push(...newNode.children);\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nfunction diffAttributes(oldNode, newNode) {\r\n    const oldAttributes = oldNode.attrs;\r\n    const newAttributes = newNode.attrs;\r\n\r\n    const addedAttributes: any[] = [];\r\n    const removedAttributes: any[] = [];\r\n    const updatedAttributes: any[] = [];\r\n\r\n    // \u67E5\u627E\u65B0\u589E\u7684\u548C\u5DF2\u5220\u9664\u7684\u5C5E\u6027\r\n    for (const attribute of oldAttributes) {\r\n        if (!newAttributes.some(attr => attr.name === attribute.name)) {\r\n            removedAttributes.push(attribute);\r\n        }\r\n    }\r\n    for (const attribute of newAttributes) {\r\n        if (!oldAttributes.some(attr => attr.name === attribute.name)) {\r\n            addedAttributes.push(attribute);\r\n        }\r\n    }\r\n\r\n    // \u67E5\u627E\u66F4\u65B0\u7684\u5C5E\u6027\uFF08\u5C5E\u6027\u540D\u76F8\u540C\u4F46\u503C\u4E0D\u540C\uFF09\r\n    for (const oldAttr of oldAttributes) {\r\n        const newAttr = newAttributes.find(attr => attr.name === oldAttr.name);\r\n        if (newAttr && newAttr.value !== oldAttr.value) {\r\n            updatedAttributes.push(newAttr);\r\n        }\r\n    }\r\n\r\n    // \u6807\u8BB0\u8282\u70B9\u7684\u5C5E\u6027\u5DEE\u5F02\r\n    if (addedAttributes.length > 0 || removedAttributes.length > 0 || updatedAttributes.length > 0) {\r\n        oldNode.diffAttributes = {\r\n            added: addedAttributes,\r\n            removed: removedAttributes,\r\n            updated: updatedAttributes\r\n        };\r\n        newNode.diffAttributes = {\r\n            added: addedAttributes,\r\n            removed: removedAttributes,\r\n            updated: updatedAttributes\r\n        };\r\n    }\r\n}\r\n\r\nfunction addDiffType(node, diffType, options) {\r\n    node.diffType = diffType;\r\n    // \u5BF9\u5DEE\u5F02\u5316\u8282\u70B9\u8FDB\u884C\u5904\u7406\uFF0C\u4F8B\u5982\u6DFB\u52A0ins\u6216del\u6807\u7B7E\r\n    const diffNode = createDiffNode(node, options);\r\n    if(parentMap[diffNode.id]) {\r\n        parentMap[diffNode.id] = diffNode;\r\n    }\r\n    return diffNode;\r\n}\r\n\r\nfunction createDiffNode(node, options={}) {\r\n    // \u6839\u636E\u5DEE\u5F02\u7C7B\u578B\u521B\u5EFA\u76F8\u5E94\u7684\u5DEE\u5F02\u8282\u70B9\r\n    if (node.diffType === DiffType.added) {\r\n        // \u521B\u5EFAins\u8282\u70B9\r\n        const insNode: ElementNode = createInsNode(node, options)\r\n        return insNode\r\n    } else if (node.diffType === DiffType.removed) {\r\n        // \u521B\u5EFAdel\u8282\u70B9\r\n        const delNode: ElementNode = createDelNode(node, options)\r\n        return delNode;\r\n    } else {\r\n        // \u4E0D\u9700\u8981\u5DEE\u5F02\u5316\u5904\u7406\u7684\u8282\u70B9\uFF0C\u4FDD\u6301\u539F\u6837\r\n        return node;\r\n    }\r\n}\r\n\r\n\r\nfunction insert(newNode, container, anchor) {\r\n    if(anchor) {\r\n        //\u5982\u679C\u6709\u8282\u70B9\u5DF2\u7ECF\u627E\u5230\r\n        const findNodeIndex = container.children.findIndex((node) => node === anchor);\r\n        container.children.splice(findNodeIndex, 1, newNode);\r\n    }else {\r\n        if(container) {\r\n            if(container.children) {\r\n                container.children.push(newNode);\r\n            }else {\r\n                const containerParent = parentMap[container.pid];\r\n                if(containerParent && containerParent.children) {\r\n                    containerParent.children.push(newNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "\r\nexport function transformText(node, context) {\r\n    return function postformText() {\r\n        const { tag, props } = node;\r\n        \r\n        //\u8F6C\u6362\u6587\u672C\u8282\u70B9\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
