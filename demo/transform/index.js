// packages/core/utils/constants.ts
var CONFIG = {
  idx: BigInt(1)
  //可变配置变量
};

// packages/core/utils/element.ts
function isEqualElementType(element, elementThen) {
  if (element.type === elementThen.type) {
    return true;
  }
  return false;
}

// packages/core/tokenize.ts
function createInsNode(node, options) {
  const insNode = {
    id: CONFIG.idx++,
    type: "Element" /* Element */,
    tagName: "ins",
    attrs: [...options.newAttrs],
    children: [node],
    pid: node.pid
  };
  node.pid = insNode.id;
  return insNode;
}
function createDelNode(node, options) {
  const delNode = {
    id: CONFIG.idx++,
    type: "Element" /* Element */,
    tagName: "del",
    attrs: [...options.oldAttrs],
    children: [node],
    pid: node.pid
  };
  node.pid = delNode.id;
  return delNode;
}

// packages/transform/transformDiff.ts
var parentMap = {};
function transformDiffPlugin(options) {
  parentMap = {};
  const _options = Object.assign({
    oldAttrs: [],
    //外部属性
    newAttrs: []
  }, options);
  return function transformDiff(ast, context) {
    const diffAst = context.diffAst;
    const oldStack = [diffAst];
    const newStack = [ast];
    while (oldStack.length || newStack.length) {
      let oldNode = oldStack.shift();
      let newNode = newStack.shift();
      if (newNode) {
        parentMap[newNode.id] = newNode;
      }
      const newParentNode = newNode && parentMap[newNode.pid];
      const oldParentNode = oldNode && parentMap[oldNode.pid];
      const oldToNewNode = oldNode && parentMap[oldNode.id];
      if (oldNode && newNode) {
        if (isEqualElementType(oldNode, newNode)) {
          if (oldNode.type === "Text" /* Text */) {
            if (oldNode.content !== newNode.content) {
              insert(addDiffType(oldNode, 1 /* removed */, _options), oldParentNode, oldToNewNode);
              insert(addDiffType(newNode, 0 /* added */, _options), newParentNode, newNode);
            }
          } else if (oldNode.type === "Element" /* Element */) {
            if (oldNode.tagName !== newNode.tagName) {
              insert(addDiffType(oldNode, 1 /* removed */, _options), oldParentNode, oldToNewNode);
              insert(addDiffType(newNode, 0 /* added */, _options), newParentNode, newNode);
            } else {
              diffAttributes(oldNode, newNode);
            }
          } else {
          }
        } else {
          insert(addDiffType(oldNode, 1 /* removed */, _options), oldParentNode, oldToNewNode);
          insert(addDiffType(newNode, 0 /* added */, _options), newParentNode, newNode);
        }
      } else if (oldNode) {
        insert(addDiffType(oldNode, 1 /* removed */, _options), oldParentNode, oldToNewNode);
      } else if (newNode) {
        insert(addDiffType(newNode, 0 /* added */, _options), newParentNode, newNode);
      }
      if (oldNode && (oldNode.type === "Element" /* Element */ && !oldNode.unary || oldNode.type === "Root" /* Root */)) {
        oldStack.push(...oldNode.children);
      }
      if (newNode && (newNode.type === "Element" /* Element */ && !newNode.unary || newNode.type === "Root" /* Root */)) {
        newStack.push(...newNode.children);
      }
    }
    return () => {
    };
  };
}
function diffAttributes(oldNode, newNode) {
  const oldAttributes = oldNode.attrs;
  const newAttributes = newNode.attrs;
  const addedAttributes = [];
  const removedAttributes = [];
  const updatedAttributes = [];
  for (const attribute of oldAttributes) {
    if (!newAttributes.some((attr) => attr.name === attribute.name)) {
      removedAttributes.push(attribute);
    }
  }
  for (const attribute of newAttributes) {
    if (!oldAttributes.some((attr) => attr.name === attribute.name)) {
      addedAttributes.push(attribute);
    }
  }
  for (const oldAttr of oldAttributes) {
    const newAttr = newAttributes.find((attr) => attr.name === oldAttr.name);
    if (newAttr && newAttr.value !== oldAttr.value) {
      updatedAttributes.push(newAttr);
    }
  }
  if (addedAttributes.length > 0 || removedAttributes.length > 0 || updatedAttributes.length > 0) {
    oldNode.diffAttributes = {
      added: addedAttributes,
      removed: removedAttributes,
      updated: updatedAttributes
    };
    newNode.diffAttributes = {
      added: addedAttributes,
      removed: removedAttributes,
      updated: updatedAttributes
    };
  }
}
function addDiffType(node, diffType, options) {
  node.diffType = diffType;
  const diffNode = createDiffNode(node, options);
  if (parentMap[diffNode.id]) {
    parentMap[diffNode.id] = diffNode;
  }
  return diffNode;
}
function createDiffNode(node, options = {}) {
  if (node.diffType === 0 /* added */) {
    const insNode = createInsNode(node, options);
    return insNode;
  } else if (node.diffType === 1 /* removed */) {
    const delNode = createDelNode(node, options);
    return delNode;
  } else {
    return node;
  }
}
function insert(newNode, container, anchor) {
  if (anchor) {
    const findNodeIndex = container.children.findIndex((node) => node === anchor);
    container.children.splice(findNodeIndex, 1, newNode);
  } else {
    if (container) {
      if (container.children) {
        container.children.push(newNode);
      } else {
        const containerParent = parentMap[container.pid];
        if (containerParent && containerParent.children) {
          containerParent.children.push(newNode);
        }
      }
    }
  }
}

// packages/transform/transformText.ts
function transformText(node, context) {
  return function postformText() {
    const { tag, props } = node;
  };
}
export {
  transformDiffPlugin,
  transformText
};
//# sourceMappingURL=data:application/json;base64,
