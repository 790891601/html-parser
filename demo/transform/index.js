// packages/core/utils/element.ts
function isEqualElementType(element, elementThen) {
  if (element.type === elementThen.type) {
    return true;
  }
  return false;
}

// packages/transform/transformDiff.ts
function transformDiff(ast, context) {
  const diffAst = context.diffAst;
  const oldStack = [...diffAst.children];
  const newStack = [...ast.children];
  while (oldStack.length || newStack.length) {
    let isPushChildren = true;
    let oldNode = oldStack.pop();
    let newNode = newStack.pop();
    const oldParentNode = oldNode && oldNode.parentNode;
    const newParentNode = newNode && newNode.parentNode;
    if (oldNode && newNode) {
      if (isEqualElementType(oldNode, newNode)) {
        if (oldNode.type === "Text" /* Text */) {
          if (oldNode.content !== newNode.content) {
            insert(addDiffType(oldNode, 1 /* removed */), newParentNode, null);
            insert(addDiffType(newNode, 0 /* added */), newParentNode, newNode);
          }
        } else if (oldNode.type === "Element" /* Element */) {
          if (oldNode.tagName !== newNode.tagName) {
            isPushChildren = false;
            insert(addDiffType(oldNode, 1 /* removed */), newParentNode, null);
            insert(addDiffType(newNode, 0 /* added */), newParentNode, newNode);
          }
        } else {
        }
      } else {
        insert(addDiffType(oldNode, 1 /* removed */), newParentNode, null);
        insert(addDiffType(newNode, 0 /* added */), newParentNode, newNode);
      }
    } else if (oldNode) {
      insert(addDiffType(oldNode, 1 /* removed */), oldParentNode, oldNode);
    } else if (newNode) {
      insert(addDiffType(newNode, 0 /* added */), newParentNode, newNode);
    }
    if (oldNode && oldNode.type === "Element" /* Element */ && isPushChildren) {
      oldStack.push(...oldNode.children);
    }
    if (newNode && newNode.type === "Element" /* Element */ && isPushChildren) {
      newStack.push(...newNode.children);
    }
  }
  return () => {
  };
}
function addDiffType(node, diffType) {
  node.diffType = diffType;
  const diffNode = createDiffNode(node);
  return diffNode;
}
function createDiffNode(node) {
  if (node.diffType === 0 /* added */) {
    return createInsNode(node);
  } else if (node.diffType === 1 /* removed */) {
    return createDelNode(node);
  } else {
    return node;
  }
}
function createInsNode(node) {
  const insNode = {
    type: "Element" /* Element */,
    tagName: "ins",
    attrs: [],
    children: [node],
    parentNode: node.parentNode
  };
  node.parentNode = insNode;
  return insNode;
}
function createDelNode(node) {
  const delNode = {
    type: "Element" /* Element */,
    tagName: "del",
    attrs: [],
    children: [node],
    parentNode: node.parentNode
  };
  node.parentNode = delNode;
  return delNode;
}
function insert(newNode, container, anchor) {
  if (anchor) {
    const findNodeIndex = container.children.findIndex((node) => node === anchor);
    container.children.splice(findNodeIndex, 1, newNode);
  } else {
    container.children.unshift(newNode);
  }
}

// packages/transform/transformText.ts
function transformText(node, context) {
  return function postformText() {
    const { tag, props } = node;
  };
}
export {
  transformDiff,
  transformText
};
//# sourceMappingURL=data:application/json;base64,
