// packages/core/utils/element.ts
function isEqualElementType(element, elementThen) {
  if (element.type === elementThen.type) {
    return true;
  }
  return false;
}

// packages/core/htmlParser.ts
var idx = BigInt(1);
function createInsNode(node) {
  const insNode = {
    id: idx++,
    type: "Element" /* Element */,
    tagName: "ins",
    attrs: [],
    children: [node],
    pid: node.pid
  };
  node.pid = insNode.id;
  return insNode;
}
function createDelNode(node) {
  const delNode = {
    id: idx++,
    type: "Element" /* Element */,
    tagName: "del",
    attrs: [],
    children: [node],
    pid: node.pid
  };
  node.pid = delNode.id;
  return delNode;
}

// packages/transform/transformDiff.ts
function transformDiff(ast, context) {
  const diffAst = context.diffAst;
  const oldStack = [diffAst];
  const newStack = [ast];
  const parentMap = {};
  const peddingMap = {};
  while (oldStack.length || newStack.length) {
    let isPushChildren = true;
    let oldNode = oldStack.pop();
    let newNode = newStack.pop();
    const oldParentNode = oldNode && parentMap[oldNode.pid];
    const newParentNode = newNode && parentMap[newNode.pid];
    if (oldNode) {
      parentMap[oldNode.id] = oldNode;
    }
    if (newNode) {
      parentMap[newNode.id] = newNode;
    }
    if (oldNode && newNode) {
      if (isEqualElementType(oldNode, newNode)) {
        if (oldNode.type === "Text" /* Text */) {
          if (oldNode.content !== newNode.content) {
            insert(addDiffType(oldNode, 1 /* removed */), newParentNode, null);
            insert(addDiffType(newNode, 0 /* added */), newParentNode, newNode);
          }
        } else if (oldNode.type === "Element" /* Element */) {
          if (oldNode.tagName !== newNode.tagName) {
            isPushChildren = false;
            insert(addDiffType(oldNode, 1 /* removed */), newParentNode, null);
            insert(addDiffType(newNode, 0 /* added */), newParentNode, newNode);
          }
        } else {
        }
      } else {
        insert(addDiffType(oldNode, 1 /* removed */), newParentNode, null);
        insert(addDiffType(newNode, 0 /* added */), newParentNode, newNode);
      }
    } else if (oldNode) {
      insert(addDiffType(oldNode, 1 /* removed */), oldParentNode, oldNode);
    } else if (newNode) {
      insert(addDiffType(newNode, 0 /* added */), newParentNode, newNode);
    }
    if (oldNode && (oldNode.type === "Element" /* Element */ || oldNode.type === "Root" /* Root */) && isPushChildren) {
      oldStack.push(...oldNode.children);
    }
    if (newNode && (newNode.type === "Element" /* Element */ || newNode.type === "Root" /* Root */) && isPushChildren) {
      newStack.push(...newNode.children);
    }
  }
  return () => {
  };
}
function addDiffType(node, diffType) {
  node.diffType = diffType;
  const diffNode = createDiffNode(node);
  return diffNode;
}
function createDiffNode(node) {
  if (node.diffType === 0 /* added */) {
    return createInsNode(node);
  } else if (node.diffType === 1 /* removed */) {
    return createDelNode(node);
  } else {
    return node;
  }
}
function insert(newNode, container, anchor) {
  if (anchor) {
    const findNodeIndex = container.children.findIndex((node) => node === anchor);
    container.children.splice(findNodeIndex, 1, newNode);
  } else {
    container.children.unshift(newNode);
  }
}

// packages/transform/transformText.ts
function transformText(node, context) {
  return function postformText() {
    const { tag, props } = node;
  };
}
export {
  transformDiff,
  transformText
};
//# sourceMappingURL=data:application/json;base64,
