// packages/core/utils/constants.ts
var TagState = {
  //标签模式
  initial: 1,
  // 初始状态
  tagOpen: 2,
  //标签开始状态
  tagName: 3,
  // 标签名称状态
  text: 4,
  //文本状态
  tagEnd: 5,
  //结束标签状态
  tagEndName: 6
  // 结束标签名称状态
};
var toggleMode = (context, mode) => {
  context.oldMode = context.mode;
  context.mode = mode;
};
var revertMode = (context) => {
  context.mode = context.oldMode;
};

// packages/core/utils/advance.ts
function advanceBy(context, by) {
  context.source = context.source.slice(by);
}
function advanceSpaces(context) {
  let { source } = context;
  context.source = source.replace(/^[\r\f\t\n ]+/, "");
}

// packages/core/utils/element.ts
var unary = [
  "br",
  "hr",
  "img",
  "input",
  "meta",
  "link",
  "area",
  "base",
  "col",
  "command",
  "embed",
  "keygen",
  "param",
  "source",
  "track",
  "wbr"
];
function isUnary(tagName) {
  return unary.includes(tagName);
}
function closeElement(element) {
  if (element.unary) {
    element.tagStatus = TagState.tagEnd;
  }
}

// packages/core/utils/data.ts
function deepCopy(obj, cache = /* @__PURE__ */ new WeakMap()) {
  if (obj === null || typeof obj !== "object") {
    return obj;
  }
  if (cache.has(obj)) {
    return cache.get(obj);
  }
  const copy = Array.isArray(obj) ? [] : {};
  cache.set(obj, copy);
  for (let key in obj) {
    copy[key] = deepCopy(obj[key], cache);
  }
  return copy;
}

// packages/core/htmlParser.ts
function tokenize(template) {
  const tokens = [];
  return tokens;
}
var HTMLParser = class {
  _options;
  constructor(options = {}) {
    this._options = options;
  }
  parser(template) {
    const root = {
      type: "Root" /* Root */,
      children: []
    };
    const context = {
      source: template,
      mode: 0 /* DATA */,
      oldMode: 0 /* DATA */,
      type: "Root" /* Root */,
      children: [],
      parentNode: root
    };
    root.children = this.parseChildren(context);
    return root;
  }
  parseChildren(context, ancestors = []) {
    let nodes = [];
    while (this.isEnd(context, ancestors)) {
      const { mode, source, parentNode } = context;
      let node;
      if (mode === 0 /* DATA */ || mode === 1 /* RCDATA */) {
        if (source.startsWith("<![CDATA[")) {
          toggleMode(context, 3 /* CDATA */);
          continue;
        } else if (mode === 0 /* DATA */ && source[0] === "<") {
          if (source[1] === "!") {
            if (source.startsWith("<!--")) {
              node = this.parseComment(context, ancestors);
            }
          } else if (/[a-z]/i.test(source[1])) {
            node = this.parseElement(context, ancestors);
          } else if (source[1] === "/") {
            return nodes;
          }
        } else if (mode === 1 /* RCDATA */ || mode === 0 /* DATA */ && source[1] === "/") {
          throw new Error("\u4E0D\u662FDATA\u6A21\u5F0F");
        } else if (source.startsWith("{{")) {
          node = this.parseInterpolation(context);
        }
        if (!node) {
          node = this.parseText(context);
        }
        node.parentNode = parentNode;
        nodes.push(node);
      } else if (mode === 3 /* CDATA */) {
        if (source.startsWith("<![CDATA[")) {
          node = this.parseCDATA(context, ancestors);
          revertMode(context);
        }
        nodes.push(node);
      }
    }
    return nodes;
  }
  isEnd(context, ancestors) {
    if (context.source) {
      return true;
    }
  }
  parseText(context) {
    let { mode, source } = context;
    const match = source.match(/[^<>]*/);
    let content = "";
    if (match[0]) {
      advanceBy(context, match[0].length);
      content = match[0];
    }
    return {
      type: "Text" /* Text */,
      content,
      parentNode: context.parentNode
    };
  }
  parseInterpolation(context) {
    const { source } = context;
    const match = source.match(/^\{\{\s*(.*?)\s*\}\}/);
    advanceBy(context, match[0].length);
    return {
      type: "Interpolation" /* Interpolation */,
      content: [match[0], match[1]],
      parentNode: context.parentNode
    };
  }
  parseElement(context, ancestors) {
    let { mode, source } = context;
    const match = source.match(/<([a-z][a-zA-Z-]*)/);
    context.source = source.slice(match[0].length);
    const tagName = match[1];
    const element = {
      //这个状态栈，子元素需要匹配它是否需要闭合,或者它可能是自闭合的标签
      tagStatus: TagState.tagName,
      //内容状态
      tagName,
      //标签名称
      unary: false
    };
    if (isUnary(tagName)) {
      element.unary = true;
      closeElement(element);
    }
    const attrs = this.parseAttribute(context, element);
    const ElementNode2 = {
      type: "Element" /* Element */,
      tagName,
      children: [],
      attrs,
      parentNode: context.parentNode
    };
    if (!element.unary) {
      ancestors.push(element);
      element.tagStatus = TagState.text;
      const matchTagEnd = context.source.match(`(.*?)<\\/${tagName}>`);
      if (matchTagEnd) {
        context.parentNode = ElementNode2;
        ElementNode2.children = this.parseChildren(context, ancestors);
      } else {
        throw new Error("\u6807\u7B7E\u5FC5\u987B\u8981\u6709\u7ED3\u675F");
      }
      const ancestor = ancestors.pop();
      if (ancestor) {
        advanceBy(context, ancestor.tagName.length + 2);
        advanceSpaces(context);
        advanceBy(context, 1);
      } else {
        throw new Error("\u4E0D\u5408\u6CD5\u7684\u6807\u7B7E");
      }
    }
    return ElementNode2;
  }
  parseAttribute(context, element) {
    const attrReg = /(:?[a-zA-Z][a-zA-Z-]*)\s*(?:(=)\s*(?:(["'])([^"'<>]*)\3|([^\s"'<>]*)))?/;
    const attributes = [];
    advanceSpaces(context);
    let attrMatch;
    while (context.source[0] !== "<" && context.source[0] !== ">") {
      attrMatch = context.source.match(attrReg);
      advanceBy(context, attrMatch[0].length);
      attributes.push([attrMatch[0], attrMatch[1], attrMatch[2], attrMatch[4]]);
      advanceSpaces(context);
      if (context.source[0] === "/" && element.unary) {
        advanceBy(context, 1);
      }
      advanceSpaces(context);
    }
    advanceBy(context, 1);
    return attributes;
  }
  //注释
  parseComment(context, ancestors) {
    let { source } = context;
    let value = "";
    source = source.slice(4);
    source = source.replace(/([\s\S]*?)(-->)/, function(match, $1, $2) {
      value = $1;
      return $2 ? $2 : "";
    });
    if (source.startsWith("-->")) {
      context.source = source.slice(3);
    } else {
      value = context.source;
      context.source = "";
    }
    return {
      type: "Comment" /* Comment */,
      content: value,
      parentNode: context.parentNode
    };
  }
  parseCDATA(context, ancestors) {
    const cdataMatch = context.source.match(/^<!\[CDATA\[([\s\S]*?)\]\]/);
    advanceBy(context, cdataMatch[0].length);
    return {
      type: "CDATA" /* CDATA */,
      content: cdataMatch[1],
      parentNode: context.parentNode
    };
  }
};

// packages/core/generate.ts
function generate(node, options = {}) {
  if (node.type === "Root" /* Root */) {
    return generateChildrenCode(node.children);
  } else if (node.type === "Element" /* Element */) {
    const attrs = generateAttributesCode(node.attrs);
    const children = generateChildrenCode(node.children);
    return `<${node.tagName}${attrs}>${children}</${node.tagName}>`;
  } else if (node.type === "Text" /* Text */) {
    return node.content;
  }
}
function generateAttributesCode(attrs) {
  if (!Array.isArray(attrs) || attrs.length === 0) {
    return "";
  }
  return " " + attrs.map((attr) => `${attr.name}="${attr.value}"`).join(" ");
}
function generateChildrenCode(children) {
  if (!Array.isArray(children) || children.length === 0) {
    return "";
  }
  return children.map((child) => generate(child)).join("");
}

// packages/core/transform.ts
function transform(ast, options = {}) {
  const { nodeTransforms = [], directiveTransforms = {}, diffAst = {} } = options;
  const context = {
    ast: deepCopy(ast),
    diffAst: deepCopy(diffAst),
    nodeTransforms: [
      // transformIf,
      // transformFor,
      // transformText,
      // transformDiff,
      // transformElement,
      ...nodeTransforms.filter((item) => Array.isArray(item) ? item[0] !== "all" : true)
    ],
    directiveTransforms: {
      // on: transformOn,
      // bind: transformBind,
      // model: transformModel
      ...directiveTransforms
    }
  };
  const nodeTransformAll = nodeTransforms.filter((item) => Array.isArray(item) && item[0] === "all").flatMap((f) => f[1]);
  callNodeTransforms(context.ast, {
    ...context,
    nodeTransforms: nodeTransformAll
  });
  traverseNode(context.ast, context);
  return generate(context.ast, options);
}
function callNodeTransforms(node, context) {
  const { nodeTransforms, onEnter, onExit } = context;
  const exitFns = [];
  typeof onEnter === "function" && onEnter(node, context);
  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
    const onExit2 = nodeTransforms[i2](node, context);
    if (onExit2) {
      if (Array.isArray(onExit2)) {
        exitFns.push(...onExit2);
      } else {
        exitFns.push(onExit2);
      }
    }
  }
  typeof onExit === "function" && onExit(node, context);
  let i = exitFns.length;
  while (i--) {
    exitFns[i]();
  }
}
function traverseNode(node, context) {
  callNodeTransforms(node, {
    ...context,
    onEnter: () => {
      context.currentNode = node;
    },
    onExit: () => {
      traverseChildren(node, context);
      context.currentNode = node;
    }
  });
}
function traverseChildren(node, context) {
  if (node.children) {
    for (let i = 0; i < node.children.length; i++) {
      traverseNode(node.children[i], context);
    }
  }
}
export {
  HTMLParser,
  tokenize,
  transform
};
//# sourceMappingURL=data:application/json;base64,
