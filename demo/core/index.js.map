{
  "version": 3,
  "sources": ["../../packages/core/utils/constants.ts", "../../packages/core/utils/advance.ts", "../../packages/core/utils/element.ts", "../../packages/core/utils/data.ts", "../../packages/core/tokenize.ts", "../../packages/core/htmlParser.ts", "../../packages/core/generate.ts", "../../packages/core/transform.ts"],
  "sourcesContent": ["export const LEGENDS = {\r\n    'ADDED': 'added',\r\n    'REMOVED': 'removed',\r\n}\r\nexport const CONFIG = {\r\n    idx: BigInt(1), //\u53EF\u53D8\u914D\u7F6E\u53D8\u91CF\r\n}\r\n//\u91CD\u7F6Eidx\r\nexport const resetConfigIdx = () => {\r\n    CONFIG.idx = BigInt(1);\r\n}\r\n\r\n//\u5207\u6362\u6587\u672C\u6A21\u5F0F\r\nexport const toggleMode = (context, mode) => {\r\n    context.oldMode = context.mode;\r\n    context.mode = mode;\r\n}\r\n//\u6062\u590D\u6A21\u5F0F\r\nexport const revertMode = (context) => {\r\n    context.mode = context.oldMode;\r\n}\r\n", "/*\u662F\u5426\u4E3A\u7A7A*/\r\nexport function isExists(context, ancestors) {\r\n    return context.source;\r\n}\r\n//\u6D88\u8D39\u6307\u5B9A\u8DDD\u79BB\u5185\u5BB9\r\nexport function advanceBy(context, by) {\r\n    context.source = context.source.slice(by);\r\n}\r\n/*** \u6D88\u8D39\u7A7A\u683C*/\r\nexport function advanceSpaces(context) {\r\nlet {source} = context;\r\n    context.source = source.replace(/^[\\r\\f\\t\\n ]+/, '');\r\n}\r\n  ", "import {TagState} from '../types'\r\n\r\nexport const unary = [\r\n  \"br\",\r\n  \"hr\",\r\n  \"img\",\r\n  \"input\",\r\n  \"meta\",\r\n  \"link\",\r\n  \"area\",\r\n  \"base\",\r\n  \"col\",\r\n  \"command\",\r\n  \"embed\",\r\n  \"keygen\",\r\n  \"param\",\r\n  \"source\",\r\n  \"track\",\r\n  \"wbr\"\r\n];\r\nexport function isUnary(tagName): boolean {\r\n  return unary.includes(tagName);\r\n}\r\n  \r\n/*\u7ED3\u675F\u6807\u7B7E*/\r\nexport function closeElement(element) {\r\n  if(element.unary) {\r\n    element.tagStatus = TagState.tagEnd;\r\n  }\r\n}\r\n/**\r\n * \u5BF9\u6BD4\u5143\u7D20\u662F\u5426\u76F8\u540C\u7C7B\u578B\r\n * @param element \r\n * @param elementThen \r\n * @returns \r\n */\r\nexport function isEqualElementType(element, elementThen): boolean {\r\n  if(element.type === elementThen.type) {\r\n    return true;\r\n  }\r\n  return false;\r\n}", "export function deepCopy(obj, cache = new WeakMap()) {\r\n    // \u5982\u679C\u662F\u57FA\u672C\u6570\u636E\u7C7B\u578B\u6216\u8005null\uFF0C\u76F4\u63A5\u8FD4\u56DE\u539F\u5BF9\u8C61\r\n    if (obj === null || typeof obj !== 'object') {\r\n      return obj;\r\n    }\r\n    \r\n    // \u68C0\u67E5\u7F13\u5B58\uFF0C\u907F\u514D\u65E0\u9650\u9012\u5F52\r\n    if (cache.has(obj)) {\r\n      return cache.get(obj);\r\n    }\r\n    \r\n    // \u521B\u5EFA\u4E00\u4E2A\u65B0\u7684\u5BF9\u8C61\u6216\u6570\u7EC4\r\n    const copy = Array.isArray(obj) ? [] : {};\r\n    \r\n    // \u5C06\u65B0\u5BF9\u8C61\u6DFB\u52A0\u5230\u7F13\u5B58\r\n    cache.set(obj, copy);\r\n    \r\n    // \u9012\u5F52\u5730\u590D\u5236\u6BCF\u4E2A\u5C5E\u6027\r\n    for (let key in obj) {\r\n      copy[key] = deepCopy(obj[key], cache);\r\n    }\r\n    \r\n    return copy;\r\n  }", "import {advanceBy, advanceSpaces, isUnary, toggleMode, revertMode, CONFIG, resetConfigIdx } from './utils/index'\r\nimport {_parserOptions, parserContext, HTMLNodeType, ElementNode, TextNode, CommentNode, Node, TagState, TextModes} from './types'\r\n\r\nconst elementRE = /^\\s*(?:<\\/\\s*([^>\\s\\/]*)\\s*>|<([^>\\s\\/]*)\\s*([^<>]*?)(\\/?)>)/;\r\n// const valuedAttributeRE = /([?]|(?!\\d|-{2}|-\\d)[a-zA-Z0-9\\u00A0-\\uFFFF-_:!%-.~<]+)=?(?:[\"]([^\"]*)[\"]|[']([^']*)[']|[{]([^}]*)[}])?/gms;\r\n\r\nexport function tokenize(context: parserContext) {\r\n  let tokens: any[] = [];\r\n\r\n  while (context.source) {\r\n    const {mode, source} = context;\r\n    let token\r\n    if (mode === TextModes.DATA || mode === TextModes.RCDATA) {\r\n      // \u53EA\u6709 DATA \u6A21\u5F0F\u624D\u652F\u6301\u6807\u7B7E\u8282\u70B9\u7684\u89E3\u6790\r\n      if (source.startsWith(\"<![CDATA[\")) {\r\n        // CDATA\r\n        toggleMode(context, TextModes.CDATA);\r\n        continue;\r\n      }else if(mode === TextModes.DATA && source[0] === \"<\") {\r\n        if(source[1] === '!') {\r\n          if (source.startsWith(\"<!--\")) {\r\n            //\u6CE8\u91CA\r\n            token = parseComment(context);\r\n          }\r\n        }else if(/[a-zA-Z]/i.test(source[1])) {\r\n          // \u89E3\u6790\u5F00\u59CB\u6807\u7B7E\r\n          token = parseStartTag(context);\r\n        }else if(source[1] === '/') {\r\n          //\u7ED3\u675F\u6807\u7B7E\u72B6\u6001\r\n          token = parseEndTag(context);\r\n        }\r\n      }else if (mode === TextModes.RCDATA || mode === TextModes.DATA && source[1] === \"/\") {\r\n        //\u7ED3\u675F\u6807\u7B7E\uFF0C\u8FD9\u91CC\u9700\u8981\u629B\u51FA\u9519\u8BEF\uFF0C\u540E\u6587\u4F1A\u8BE6\u7EC6\u89E3\u91CA\u539F\u56E0\r\n        throw new Error(\"\u4E0D\u662FDATA\u6A21\u5F0F\");\r\n      }else if(source.startsWith(\"{{\")) {\r\n        //\u63D2\u503C\u89E3\u6784\r\n        token = parseInterpolation(context);\r\n      }\r\n      // node \u4E0D\u5B58\u5728\uFF0C\u8BF4\u660E\u5904\u4E8E\u5176\u4ED6\u6A21\u5F0F\uFF0C\u5373\u975E DATA \u6A21\u5F0F\u4E14\u975E RCDATA \u6A21\u5F0F\r\n      if(!token) {\r\n        token = parseText(context);\r\n      }\r\n      tokens.push(token);\r\n    }else if(mode === TextModes.CDATA) {\r\n      if (source.startsWith(\"<![CDATA[\")) {\r\n        // CDATA\r\n        token = parseCDATA(context);\r\n        revertMode(context);\r\n      }\r\n      tokens.push(token);\r\n    }\r\n  }\r\n\r\n  return tokens;\r\n}\r\n\r\n\r\nfunction parseStartTag(context: parserContext) {\r\n    const tag: any = {\r\n      id: CONFIG.idx++,\r\n      type: TagState.tagOpen,\r\n      tagName: '',\r\n      attrs: [],\r\n      unary: false,\r\n    };\r\n\r\n    const elMatch = context.source.match(elementRE);\r\n\r\n    if(elMatch) {\r\n        const tagName = elMatch[2];\r\n        const attributes = elMatch[3];\r\n        const selfClose = elMatch[4];\r\n\r\n        tag.tagName = tagName;\r\n        tag.attrs = parseAttributes(attributes);\r\n        if(selfClose) {\r\n            if(!isUnary(tagName)) {\r\n                throw new Error(\"\u5355\u6807\u7B7E\u4E0D\u5408\u6CD5\")\r\n            }\r\n            tag.unary = true;\r\n            tag.type = TagState.tagName\r\n        }\r\n        advanceBy(context, elMatch[0].length);\r\n    }\r\n    return tag;\r\n  }\r\n  \r\n  function parseEndTag(context) {\r\n    const tagEnd: any = {\r\n        type: TagState.tagEnd,\r\n        tagName: '',\r\n    };\r\n    const elMatch = context.source.match(elementRE);\r\n\r\n    if(elMatch) {\r\n        const tagName = elMatch[1];\r\n        tagEnd.tagName = tagName;\r\n        advanceBy(context, elMatch[0].length);\r\n    }\r\n    return tagEnd\r\n  }\r\n  \r\nexport function parseAttributes(input) {\r\n    const attributes: any[] = [];\r\n  \r\n    // \u901A\u8FC7\u6B63\u5219\u8868\u8FBE\u5F0F\u63D0\u53D6\u5C5E\u6027\u540D\u548C\u5C5E\u6027\u503C\r\n    const regex = /(\\w+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^>\\s]*))/g;\r\n    let match;\r\n    \r\n    while ((match = regex.exec(input)) !== null) {\r\n      const attribute = {\r\n        name: match[1],\r\n        value: match[2] || match[3] || match[4]\r\n      };\r\n  \r\n      attributes.push(attribute);\r\n    }\r\n  \r\n    return attributes;\r\n}\r\n  \r\nexport function parseText(context) {\r\n    let {source} = context;\r\n    //\u5339\u914D\u7EAF\u6587\u672C\r\n    const match = source.match(/[^<>]*/);\r\n    let content = '';\r\n    if(match[0]) {\r\n      advanceBy(context, match[0].length);\r\n      content = match[0];\r\n    }\r\n\r\n    return {\r\n        id: CONFIG.idx++,\r\n        type: HTMLNodeType.Text,\r\n        content: content,\r\n    };\r\n}\r\n\r\n//\u6CE8\u91CA\r\nexport function parseComment(context) {\r\n    let {source} = context;\r\n    let value = ''; //\u6CE8\u91CA\u5185\u5BB9\r\n  \r\n    source = source.slice(4);\r\n    source = source.replace(/([\\s\\S]*?)(-->)/, function(match, $1, $2) {\r\n      value = $1;\r\n      return $2 ? $2 : '';\r\n    });\r\n    if(source.startsWith(\"-->\")) {\r\n      context.source = source.slice(3);\r\n    }else {\r\n      //\u6216\u8005\u624B\u52A8\u95ED\u5408\r\n      value = context.source;\r\n      context.source = '';\r\n    }\r\n    return {\r\n      id: CONFIG.idx++,\r\n      type: HTMLNodeType.Comment,\r\n      content: value,\r\n    }\r\n}\r\nexport function parseCDATA(context) {\r\n    const cdataMatch = context.source.match(/^<!\\[CDATA\\[([\\s\\S]*?)\\]\\]/);\r\n    advanceBy(context, cdataMatch[0].length);\r\n    \r\n    return {\r\n      id: CONFIG.idx++,\r\n      type: HTMLNodeType.CDATA,\r\n      content: cdataMatch[1]\r\n    }\r\n}\r\nexport function parseInterpolation(context) {\r\n    const {source} = context;\r\n    const match = source.match(/^\\{\\{\\s*(.*?)\\s*\\}\\}/);\r\n    advanceBy(context, match[0].length);\r\n\r\n    return {\r\n      id: CONFIG.idx++,\r\n      type: HTMLNodeType.Interpolation,\r\n      content: [match[0], match[1]],\r\n    }\r\n}\r\n\r\nexport function createInsNode(node, options) {\r\n    // \u521B\u5EFAins\u8282\u70B9\uFF0C\u5E76\u590D\u5236\u539F\u8282\u70B9\u7684\u5C5E\u6027\u548C\u5B50\u8282\u70B9\r\n    const insNode: ElementNode = {\r\n        id: CONFIG.idx++,\r\n        type: HTMLNodeType.Element,\r\n        tagName: 'ins',\r\n        attrs: [...options.newAttrs],\r\n        children: [node],\r\n        pid: node.pid,\r\n    };\r\n    node.pid = insNode.id;\r\n    return insNode;\r\n  }\r\n  export function createDelNode(node, options) {\r\n    // \u521B\u5EFAdel\u8282\u70B9\uFF0C\u5E76\u590D\u5236\u539F\u8282\u70B9\u7684\u5C5E\u6027\u548C\u5B50\u8282\u70B9\r\n    const delNode: ElementNode = {\r\n        id: CONFIG.idx++,\r\n        type: HTMLNodeType.Element,\r\n        tagName: 'del',\r\n        attrs: [...options.oldAttrs],\r\n        children: [node],\r\n        pid: node.pid,\r\n    };\r\n    node.pid = delNode.id;\r\n    return delNode;\r\n  }", "import {tokenize} from './tokenize'\r\nimport { CONFIG, resetConfigIdx} from './utils/index'\r\nimport {_parserOptions, parserOptions, parserContext, HTMLNodeType, ElementNode, TextNode, RootNode, CommentNode, Node, TagState, TextModes, CDATANode} from './types'\r\n\r\nexport class HTMLParser {\r\n  private _options: _parserOptions;\r\n  constructor(options: parserOptions = {}) {\r\n    this._options = options;\r\n  }\r\n  parser(template) {\r\n    resetConfigIdx();\r\n    const root: RootNode = {\r\n      id: CONFIG.idx++,\r\n      type: HTMLNodeType.Root,\r\n      children: [],\r\n      pid: BigInt(0),\r\n    };\r\n    const context: parserContext = {\r\n        source: template,\r\n        mode: TextModes.DATA,\r\n        oldMode: TextModes.DATA,\r\n        type: HTMLNodeType.Root,\r\n        children: [],\r\n        pid: root.id,\r\n    }\r\n    const tokens = tokenize(context)\r\n\r\n    const tokenContext = {\r\n      tokens,\r\n      pid: root.id,\r\n      tokenIndex: 0, //token\u6307\u9488,\u4F18\u5316\u6027\u80FD\uFF0C\u4E0D\u8BA9\u6570\u636E\u8FDB\u884C\u64CD\u4F5C\r\n    }\r\n    root.children = this.parseChildren(tokenContext);\r\n    return root\r\n  }\r\n  parseChildren(context, ancestors = []): Node[] {\r\n      let nodes: Node[] = [];\r\n      const {tokens} = context;\r\n\r\n      //\u901A\u8FC7tokens\u6765\u6784\u5EFA\u6811\u8282\u70B9,\u6784\u5EFApid\u548Cid\u4E4B\u95F4\u7684\u8054\u7CFB\r\n      while(!this.isEnd(context, ancestors)) {\r\n        const token = tokens[context.tokenIndex++];\r\n        //\u6307\u9488\u4E3A\u7A7A\r\n        if(token == null) {\r\n          throw new Error(\"\u4E0D\u5141\u8BB8token\u4E3A\u7A7A\");\r\n        }\r\n        \r\n        const {type} = token;\r\n        let node: Node\r\n\r\n        if(type === HTMLNodeType.Comment) {\r\n          node = this.parseNode(context, token);\r\n        }else if(type === HTMLNodeType.CDATA) {\r\n          node = this.parseNode(context, token);\r\n        }else if(type === HTMLNodeType.Interpolation) {\r\n          node = this.parseNode(context, token);\r\n        }else if(type === TagState.tagOpen) {\r\n          node = this.parseStartNode(context, token, ancestors);\r\n        }else if(type === TagState.tagEnd) {\r\n          this.parseEndNode(context, token, ancestors);\r\n          return nodes;\r\n        }else if(type === TagState.tagName) {\r\n          node = this.parseElementNode(context, token);\r\n        }else {\r\n          node = this.parseNode(context, token);\r\n        }\r\n\r\n        nodes.push(node);\r\n      }\r\n      return nodes;\r\n  }\r\n  parseStartNode(context, token, ancestors): Node {\r\n    //\u5F53\u5F00\u59CB\u6807\u7B7E\uFF0C\u5C31\u542F\u7528\u6807\u7B7E\u6808\r\n    ancestors.push(token);\r\n    token.pid = context.pid;\r\n    context.pid = token.id;\r\n    token.children = this.parseChildren(context, ancestors);\r\n\r\n    token.type = HTMLNodeType.Element\r\n    return token;\r\n  }\r\n  parseEndNode(context, token, ancestors) {\r\n    //\u5F53\u5F00\u59CB\u6807\u7B7E\uFF0C\u5C31\u5220\u9664\u6807\u7B7E\u6808,\u6807\u7B7E\u6808\u5FC5\u987B\u8DDF\u8FDB\u53BB\u6807\u7B7E\u6808\u7684tagName\u4E00\u81F4\uFF0Ctype\u662Fopen\r\n    const startTag = ancestors[ancestors.length - 1];\r\n    if(startTag == null) {\r\n      throw new Error(\"\u6807\u7B7E\u4E0D\u5339\u914D\");\r\n    }\r\n    if(startTag.tagName === token.tagName) {\r\n      const startTag = ancestors.pop();\r\n      context.pid = startTag.pid;\r\n    }else {\r\n      throw new Error(\"\u6807\u7B7E\u4E0D\u5339\u914D\");\r\n    }\r\n  }\r\n  parseElementNode(context, token): ElementNode {\r\n    return {\r\n      ...token,\r\n      pid: context.pid,\r\n      type: HTMLNodeType.Element\r\n    }\r\n  }\r\n  parseNode(context, token): Node {\r\n    return {\r\n      ...token,\r\n      pid: context.pid,\r\n    }\r\n  }\r\n  isEnd(context, ancestors) {\r\n    //\u5143\u7D20\u6808,\u5F53\u524D\u5B50\u5143\u7D20\u6709\u5BF9\u5E94\u6808\r\n    // for(let i = 0; i < ancestors.length; i++) {\r\n    //   if(ancestors[i].tag) {\r\n    //     return true;\r\n    //   }\r\n    // }\r\n    if(context.tokenIndex >= context.tokens.length) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}", "import {HTMLNodeType} from '../core/types'\r\n//3.\u7528\u6765\u6839\u636EJavaScript AST\u751F\u6210\u6E32\u67D3\u51FD\u6570\u4EE3\u7801\u7684\u751F\u6210\u5668\uFF08generator\uFF09\r\nexport function generate(node, options={}) {\r\n    if (node.type === HTMLNodeType.Root) {\r\n      // \u5904\u7406\u6839\u8282\u70B9\r\n      return generateChildrenCode(node.children);\r\n    } else if (node.type === HTMLNodeType.Element) {\r\n      // \u5904\u7406\u5143\u7D20\u8282\u70B9\r\n      const attrs = generateAttributesCode(node.attrs);\r\n      const children = generateChildrenCode(node.children);\r\n      return `<${node.tagName}${attrs}>${children}</${node.tagName}>`;\r\n    } else if (node.type === HTMLNodeType.Text) {\r\n      // \u5904\u7406\u6587\u672C\u8282\u70B9\r\n      return node.content;\r\n    }\r\n  }\r\n  \r\n  function generateAttributesCode(attrs) {\r\n    if (!Array.isArray(attrs) || attrs.length === 0) {\r\n      return '';\r\n    }\r\n    return ' ' + attrs.map(attr => `${attr.name}=\"${attr.value}\"`).join(' ');\r\n  }\r\n  \r\n  function generateChildrenCode(children) {\r\n    if (!Array.isArray(children) || children.length === 0) {\r\n      return '';\r\n    }\r\n    return children.map(child => generate(child)).join('');\r\n  }", "\r\nimport {transformText, transformDiffPlugin} from '../transform/index';\r\nimport {deepCopy} from './utils/index'\r\nimport { generate } from './generate';\r\n\r\ninterface transformOptions {\r\n    nodeTransforms?: Function[] | [string, Function],\r\n    directiveTransforms?: Object,\r\n    diffAst?: Object\r\n}\r\n\r\nexport function transform(ast, options: transformOptions = {}) {\r\n    const { nodeTransforms = [], directiveTransforms = {}, diffAst = {} } = options;\r\n\r\n    const context = {\r\n        ast: deepCopy(ast),\r\n        diffAst: deepCopy(diffAst),\r\n        nodeTransforms: [\r\n            // transformIf,\r\n            // transformFor,\r\n            // transformText,\r\n            // transformDiff,\r\n            // transformElement,\r\n            ...nodeTransforms.filter(item => Array.isArray(item) ? item[0] !== 'all' : true),\r\n        ],\r\n        directiveTransforms: {\r\n            // on: transformOn,\r\n            // bind: transformBind,\r\n            // model: transformModel\r\n            ...directiveTransforms\r\n        },\r\n    }\r\n    const nodeTransformAll = nodeTransforms.filter(item => Array.isArray(item) && item[0] === 'all').flatMap(f => f[1]);\r\n    callNodeTransforms(context.ast, {\r\n        ...context,\r\n        nodeTransforms: nodeTransformAll\r\n    });\r\n\r\n    //\u904D\u5386\u6811\u7ED3\u6784\uFF0C\u5E76\u8C03\u7528\u63D2\u4EF6\u51FD\u6570\r\n    traverseNode(context.ast, context);\r\n    return generate(context.ast, options);\r\n}\r\n\r\nfunction callNodeTransforms(node, context) {\r\n    const { nodeTransforms, onEnter, onExit } = context;\r\n    const exitFns: Function[] = []; //\u9000\u51FA\u51FD\u6570\r\n    \r\n    typeof onEnter === 'function' && onEnter(node, context);\r\n    for(let i = 0; i < nodeTransforms.length; i++) {\r\n        const onExit = nodeTransforms[i](node, context);\r\n        if(onExit) {\r\n            if(Array.isArray(onExit)) {\r\n                exitFns.push(...onExit);\r\n            }else {\r\n                exitFns.push(onExit);\r\n            }\r\n        }\r\n    }\r\n    typeof onExit === 'function' && onExit(node, context);\r\n    let i = exitFns.length;\r\n\r\n    //\u9006\u5411\u6267\u884C\u8F93\u51FA\u51FD\u6570,\u5148\u8FDB\u5148\u51FA\r\n    while (i--) {\r\n        exitFns[i]();\r\n    }\r\n} \r\n\r\n//\u904D\u5386AST\r\nfunction traverseNode(node, context) {\r\n    callNodeTransforms(node, {\r\n        ...context,\r\n        onEnter: () => {\r\n            context.currentNode = node;\r\n        },\r\n        onExit: () => {\r\n            traverseChildren(node, context);\r\n            context.currentNode = node;\r\n        }\r\n    });\r\n}\r\nfunction traverseChildren(node, context) {\r\n    // \u9012\u5F52\u904D\u5386\u5B50\u6570\u7EC4\r\n    if(node.children){\r\n        for(let i = 0; i < node.children.length; i++) {\r\n            traverseNode(node.children[i], context);\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["startTag", "i", "onExit"]
}
